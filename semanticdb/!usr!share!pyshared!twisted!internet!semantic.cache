;; Object internet/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "internet/"
  :tables (list 
   (semanticdb-table "task.py"
    :major-mode 'python-mode
    :tags 
        '( (""""
Scheduling utility methods and classes.

@author: Jp Calderone
"""" code nil nil [162 232])
            ("__metaclass__" variable nil nil [234 254])
            ("time" include nil nil [256 267])
            ("zope.interface" include nil nil [269 306])
            ("twisted.python" include nil nil [308 342])
            ("twisted.python.failure" include nil nil [343 385])
            ("twisted.internet" include nil nil [387 427])
            ("twisted.internet.interfaces" include nil nil [428 480])
            ("LoopingCall" type
               (:members 
                  ( (""""Call a function repeatedly.

    If C{f} returns a deferred, rescheduling will not take place until the
    deferred has fired. The result value is ignored.

    @ivar f: The function to call.
    @ivar a: A tuple of arguments to pass the function.
    @ivar kw: A dictionary of keyword arguments to pass to the function.
    @ivar clock: A provider of
        L{twisted.internet.interfaces.IReactorTime}.  The default is
        L{twisted.internet.reactor}. Feel free to set this to
        something else, but it probably ought to be set *before*
        calling L{start}.

    @type _expectNextCallAt: C{float}
    @ivar _expectNextCallAt: The time at which this instance most recently
        scheduled itself to run.

    @type _realLastTime: C{float}
    @ivar _realLastTime: When counting skips, the time at which the skip counter
        was last invoked.

    @type _runAtStart: C{bool}
    @ivar _runAtStart: A flag indicating whether the 'now' argument was passed
        to L{LoopingCall.start}.
    """" code nil (reparse-symbol indented_block_body) [506 1524])
                    ("call" variable nil (reparse-symbol indented_block_body) [1530 1541])
                    ("running" variable nil (reparse-symbol indented_block_body) [1546 1561])
                    ("deferred" variable nil (reparse-symbol indented_block_body) [1566 1581])
                    ("interval" variable nil (reparse-symbol indented_block_body) [1586 1601])
                    ("_expectNextCallAt" variable nil (reparse-symbol indented_block_body) [1606 1629])
                    ("_runAtStart" variable nil (reparse-symbol indented_block_body) [1634 1653])
                    ("starttime" variable nil (reparse-symbol indented_block_body) [1658 1674])
                    ("__init__" function (:arguments 
                      ( ("self" variable nil (reparse-symbol function_parameters) [1693 1697])
                        ("f" variable nil (reparse-symbol function_parameters) [1699 1700])
                        ("a" variable nil (reparse-symbol function_parameters) [1702 1704])
                        ("kw" variable nil (reparse-symbol function_parameters) [1706 1710]))                      ) (reparse-symbol indented_block_body) [1680 1846])
                    ("withCount" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [1866 1869])
                        ("countCallable" variable nil (reparse-symbol function_parameters) [1871 1884]))                      ) (reparse-symbol indented_block_body) [1852 3776])
                    ("withCount" variable nil (reparse-symbol indented_block_body) [3781 3815])
                    ("_intervalOf" function (:arguments 
                      ( ("self" variable nil (reparse-symbol function_parameters) [3838 3842])
                        ("t" variable nil (reparse-symbol function_parameters) [3844 3845]))                      ) (reparse-symbol indented_block_body) [3822 4310])
                    ("start" function (:arguments 
                      ( ("self" variable nil (reparse-symbol function_parameters) [4326 4330])
                        ("interval" variable nil (reparse-symbol function_parameters) [4332 4340])
                        ("now" variable nil (reparse-symbol function_parameters) [4342 4345]))                      ) (reparse-symbol indented_block_body) [4316 5544])
                    ("stop" function (:arguments 
                      ( ("self" variable nil (reparse-symbol function_parameters) [5558 5562]))                      ) (reparse-symbol indented_block_body) [5549 5930])
                    ("__call__" function (:arguments 
                      ( ("self" variable nil (reparse-symbol function_parameters) [5948 5952]))                      ) (reparse-symbol indented_block_body) [5935 6427])
                    ("_reschedule" function (:arguments 
                      ( ("self" variable nil (reparse-symbol function_parameters) [6449 6453]))                      ) (reparse-symbol indented_block_body) [6433 7389])
                    ("__repr__" function (:arguments 
                      ( ("self" variable nil (reparse-symbol function_parameters) [7408 7412]))                      ) (reparse-symbol indented_block_body) [7395 7809]))                  
                :type "class")
                nil [483 7809])
            ("SchedulerError" type
               (:superclasses ("Exception")
                :members 
                  ( (""""
    The operation could not be completed because the scheduler or one of its
    tasks was in an invalid state.  This exception should not be raised
    directly, but is a superclass of various scheduler-state-related
    exceptions.
    """" code nil (reparse-symbol indented_block_body) [7849 8094]))                  
                :type "class")
                nil [7812 8095])
            ("SchedulerStopped" type
               (:superclasses ("SchedulerError")
                :members 
                  ( (""""
    The operation could not complete because the scheduler was stopped in
    progress or was already stopped.
    """" code nil (reparse-symbol indented_block_body) [8142 8264]))                  
                :type "class")
                nil [8098 8265])
            ("TaskFinished" type
               (:superclasses ("SchedulerError")
                :members 
                  ( (""""
    The operation could not complete because the task was already completed,
    stopped, encountered an error or otherwise permanently stopped running.
    """" code nil (reparse-symbol indented_block_body) [8308 8472]))                  
                :type "class")
                nil [8268 8473])
            ("TaskDone" type
               (:superclasses ("TaskFinished")
                :members 
                  ( (""""
    The operation could not complete because the task was already completed.
    """" code nil (reparse-symbol indented_block_body) [8510 8598]))                  
                :type "class")
                nil [8476 8599])
            ("TaskStopped" type
               (:superclasses ("TaskFinished")
                :members 
                  ( (""""
    The operation could not complete because the task was stopped.
    """" code nil (reparse-symbol indented_block_body) [8639 8717]))                  
                :type "class")
                nil [8602 8718])
            ("TaskFailed" type
               (:superclasses ("TaskFinished")
                :members 
                  ( (""""
    The operation could not complete because the task died with an unhandled
    error.
    """" code nil (reparse-symbol indented_block_body) [8757 8856]))                  
                :type "class")
                nil [8721 8857])
            ("NotPaused" type
               (:superclasses ("SchedulerError")
                :members 
                  ( (""""
    This exception is raised when a task is resumed which was not previously
    paused.
    """" code nil (reparse-symbol indented_block_body) [8897 8997]))                  
                :type "class")
                nil [8860 8998])
            ("_Timer" type
               (:superclasses ("object")
                :members 
                  ( ("MAX_SLICE" variable nil (reparse-symbol indented_block_body) [9027 9043])
                    ("__init__" function (:arguments 
                      ( ("self" variable nil (reparse-symbol function_parameters) [9061 9065]))                      ) (reparse-symbol indented_block_body) [9048 9116])
                    ("__call__" function (:arguments 
                      ( ("self" variable nil (reparse-symbol function_parameters) [9135 9139]))                      ) (reparse-symbol indented_block_body) [9122 9181]))                  
                :type "class")
                nil [9001 9181])
            ("_EPSILON" variable nil nil [9184 9205])
            ("_defaultScheduler" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [9228 9229]))              ) nil [9206 9315])
            ("CooperativeTask" type
               (:superclasses ("object")
                :members 
                  ( (""""
    A L{CooperativeTask} is a task object inside a L{Cooperator}, which can be
    paused, resumed, and stopped.  It can also have its completion (or
    termination) monitored.

    @see: L{CooperativeTask.cooperate}

    @ivar _iterator: the iterator to iterate when this L{CooperativeTask} is
        asked to do work.

    @ivar _cooperator: the L{Cooperator} that this L{CooperativeTask}
        participates in, which is used to re-insert it upon resume.

    @ivar _deferreds: the list of L{defer.Deferred}s to fire when this task
        completes, fails, or finishes.

    @type _deferreds: L{list}

    @type _cooperator: L{Cooperator}

    @ivar _pauseCount: the number of times that this L{CooperativeTask} has
        been paused; if 0, it is running.

    @type _pauseCount: L{int}

    @ivar _completionState: The completion-state of this L{CooperativeTask}.
        C{None} if the task is not yet completed, an instance of L{TaskStopped}
        if C{stop} was called to stop this task early, of L{TaskFailed} if the
        application code in the iterator raised an exception which caused it to
        terminate, and of L{TaskDone} if it terminated normally via raising
        L{StopIteration}.

    @type _completionState: L{TaskFinished}
    """" code nil (reparse-symbol indented_block_body) [9352 10623])
                    ("__init__" function (:arguments 
                      ( ("self" variable nil (reparse-symbol function_parameters) [10642 10646])
                        ("iterator" variable nil (reparse-symbol function_parameters) [10648 10656])
                        ("cooperator" variable nil (reparse-symbol function_parameters) [10658 10668]))                      ) (reparse-symbol indented_block_body) [10629 11038])
                    ("whenDone" function (:arguments 
                      ( ("self" variable nil (reparse-symbol function_parameters) [11057 11061]))                      ) (reparse-symbol indented_block_body) [11044 11723])
                    ("pause" function (:arguments 
                      ( ("self" variable nil (reparse-symbol function_parameters) [11739 11743]))                      ) (reparse-symbol indented_block_body) [11729 12220])
                    ("resume" function (:arguments 
                      ( ("self" variable nil (reparse-symbol function_parameters) [12237 12241]))                      ) (reparse-symbol indented_block_body) [12226 12601])
                    ("_completeWith" function (:arguments 
                      ( ("self" variable nil (reparse-symbol function_parameters) [12625 12629])
                        ("completionState" variable nil (reparse-symbol function_parameters) [12631 12646])
                        ("deferredResult" variable nil (reparse-symbol function_parameters) [12648 12662]))                      ) (reparse-symbol indented_block_body) [12607 13750])
                    ("stop" function (:arguments 
                      ( ("self" variable nil (reparse-symbol function_parameters) [13765 13769]))                      ) (reparse-symbol indented_block_body) [13756 14068])
                    ("_checkFinish" function (:arguments 
                      ( ("self" variable nil (reparse-symbol function_parameters) [14091 14095]))                      ) (reparse-symbol indented_block_body) [14074 14306])
                    ("_oneWorkUnit" function (:arguments 
                      ( ("self" variable nil (reparse-symbol function_parameters) [14329 14333]))                      ) (reparse-symbol indented_block_body) [14312 15084]))                  
                :type "class")
                nil [9317 15084])
            ("Cooperator" type
               (:superclasses ("object")
                :members 
                  ( (""""
    Cooperative task scheduler.
    """" code nil (reparse-symbol indented_block_body) [15117 15160])
                    ("__init__" function (:arguments 
                      ( ("self" variable nil (reparse-symbol function_parameters) [15179 15183])
                        ("terminationPredicateFactory" variable nil (reparse-symbol function_parameters) [15202 15229])
                        ("scheduler" variable nil (reparse-symbol function_parameters) [15255 15264])
                        ("started" variable nil (reparse-symbol function_parameters) [15301 15308]))                      ) (reparse-symbol indented_block_body) [15166 16428])
                    ("coiterate" function (:arguments 
                      ( ("self" variable nil (reparse-symbol function_parameters) [16448 16452])
                        ("iterator" variable nil (reparse-symbol function_parameters) [16454 16462])
                        ("doneDeferred" variable nil (reparse-symbol function_parameters) [16464 16476]))                      ) (reparse-symbol indented_block_body) [16434 17070])
                    ("cooperate" function (:arguments 
                      ( ("self" variable nil (reparse-symbol function_parameters) [17090 17094])
                        ("iterator" variable nil (reparse-symbol function_parameters) [17096 17104]))                      ) (reparse-symbol indented_block_body) [17076 17434])
                    ("_addTask" function (:arguments 
                      ( ("self" variable nil (reparse-symbol function_parameters) [17453 17457])
                        ("task" variable nil (reparse-symbol function_parameters) [17459 17463]))                      ) (reparse-symbol indented_block_body) [17440 17873])
                    ("_removeTask" function (:arguments 
                      ( ("self" variable nil (reparse-symbol function_parameters) [17895 17899])
                        ("task" variable nil (reparse-symbol function_parameters) [17901 17905]))                      ) (reparse-symbol indented_block_body) [17879 18026])
                    ("_tasksWhileNotStopped" function (:arguments 
                      ( ("self" variable nil (reparse-symbol function_parameters) [18058 18062]))                      ) (reparse-symbol indented_block_body) [18032 18478])
                    ("_tick" function (:arguments 
                      ( ("self" variable nil (reparse-symbol function_parameters) [18494 18498]))                      ) (reparse-symbol indented_block_body) [18484 18705])
                    ("_mustScheduleOnStart" variable nil (reparse-symbol indented_block_body) [18711 18739])
                    ("_reschedule" function (:arguments 
                      ( ("self" variable nil (reparse-symbol function_parameters) [18760 18764]))                      ) (reparse-symbol indented_block_body) [18744 18975])
                    ("start" function (:arguments 
                      ( ("self" variable nil (reparse-symbol function_parameters) [18991 18995]))                      ) (reparse-symbol indented_block_body) [18981 19224])
                    ("stop" function (:arguments 
                      ( ("self" variable nil (reparse-symbol function_parameters) [19239 19243]))                      ) (reparse-symbol indented_block_body) [19230 19730]))                  
                :type "class")
                nil [15087 19730])
            ("_theCooperator" variable nil nil [19733 19762])
            ("coiterate" function (:arguments 
              ( ("iterator" variable nil (reparse-symbol function_parameters) [19778 19786]))              ) nil [19764 20025])
            ("cooperate" function (:arguments 
              ( ("iterator" variable nil (reparse-symbol function_parameters) [20042 20050]))              ) nil [20028 20355])
            ("Clock" type
               (:members 
                  ( (""""
    Provide a deterministic, easily-controlled implementation of
    L{IReactorTime.callLater}.  This is commonly useful for writing
    deterministic unit tests for code which schedules events using this API.
    """" code nil (reparse-symbol indented_block_body) [20376 20597])
                    ("implements" code nil (reparse-symbol indented_block_body) [20602 20626])
                    ("rightNow" variable nil (reparse-symbol indented_block_body) [20632 20646])
                    ("__init__" function (:arguments 
                      ( ("self" variable nil (reparse-symbol function_parameters) [20665 20669]))                      ) (reparse-symbol indented_block_body) [20652 20696])
                    ("seconds" function (:arguments 
                      ( ("self" variable nil (reparse-symbol function_parameters) [20713 20717]))                      ) (reparse-symbol indented_block_body) [20701 21058])
                    ("callLater" function (:arguments 
                      ( ("self" variable nil (reparse-symbol function_parameters) [21078 21082])
                        ("when" variable nil (reparse-symbol function_parameters) [21084 21088])
                        ("what" variable nil (reparse-symbol function_parameters) [21090 21094])
                        ("a" variable nil (reparse-symbol function_parameters) [21096 21098])
                        ("kw" variable nil (reparse-symbol function_parameters) [21100 21104]))                      ) (reparse-symbol indented_block_body) [21064 21553])
                    ("getDelayedCalls" function (:arguments 
                      ( ("self" variable nil (reparse-symbol function_parameters) [21578 21582]))                      ) (reparse-symbol indented_block_body) [21558 21707])
                    ("advance" function (:arguments 
                      ( ("self" variable nil (reparse-symbol function_parameters) [21724 21728])
                        ("amount" variable nil (reparse-symbol function_parameters) [21730 21736]))                      ) (reparse-symbol indented_block_body) [21712 22212])
                    ("pump" function (:arguments 
                      ( ("self" variable nil (reparse-symbol function_parameters) [22227 22231])
                        ("timings" variable nil (reparse-symbol function_parameters) [22233 22240]))                      ) (reparse-symbol indented_block_body) [22218 22433]))                  
                :type "class")
                nil [20359 22433])
            ("deferLater" function (:arguments 
              ( ("clock" variable nil (reparse-symbol function_parameters) [22450 22455])
                ("delay" variable nil (reparse-symbol function_parameters) [22457 22462])
                ("callable" variable nil (reparse-symbol function_parameters) [22464 22472])
                ("args" variable nil (reparse-symbol function_parameters) [22474 22479])
                ("kw" variable nil (reparse-symbol function_parameters) [22481 22485]))              ) nil [22435 23387])
            ("__all__" variable nil nil [23390 23511]))          
    :file "task.py"
    :pointmax 23512
    :fsize 23511
    :lastmodtime '(19338 47999)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "__init__.py"
    :major-mode 'python-mode
    :tags 
        '( (""""
Twisted Internet: Asynchronous I/O and Events.

Twisted Internet is a collection of compatible event-loops for Python. It contains
the code to dispatch events to interested observers and a portable API so that
observers need not care about which event loop is running. Thus, it is possible
to use the same code for different loops, from Twisted's basic, yet portable,
select-based loop to the loops of various GUI toolkits like GTK+ or Tk.
"""" code nil nil [84 531]))          
    :file "__init__.py"
    :pointmax 532
    :fsize 531
    :lastmodtime '(18688 56957)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "main.py"
    :major-mode 'python-mode
    :tags 
        '( (""""Backwards compatability, and utility functions.

In general, this module should not be used, other than by reactor authors
who need to use the 'installReactor' method.

Maintainer: Itamar Shtull-Trauring
"""" code nil nil [133 343])
            ("error" include nil nil [345 357])
            ("CONNECTION_DONE" variable nil nil [359 416])
            ("CONNECTION_LOST" variable nil nil [417 474])
            ("installReactor" function (:arguments 
              ( ("reactor" variable nil (reparse-symbol function_parameters) [495 502]))              ) nil [476 797])
            ("__all__" variable nil nil [798 864]))          
    :file "main.py"
    :pointmax 865
    :fsize 864
    :lastmodtime '(18575 31234)
    :unmatched-syntax 'nil
    )
   )
  :file "!usr!share!pyshared!twisted!internet!semantic.cache"
  :semantic-tag-version "2.0pre7"
  :semanticdb-version "2.0pre7"
  )
